version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3

executors:
  default: &executor
    docker:
      - image: "python:3.11-bullseye"
        auth: &docker-auth
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    environment:
      PIP_CACHE_DIR: ~/caches/pip
      POETRY_CACHE_DIR: ~/caches/poetry
      POETRY_VIRTUALENVS_PATH: ~/caches/poetry/virtualenvs
      POETRY_VIRTUALENVS_IN_PROJECT: "false"
      PRE_COMMIT_HOME: ~/caches/pre-commit
  py37:
    <<: *executor
    docker:
      - image: "python:3.7-bullseye"
        auth: *docker-auth
  py38:
    <<: *executor
    docker:
      - image: "python:3.8-bullseye"
        auth: *docker-auth
  py39:
    <<: *executor
    docker:
      - image: "python:3.9-bullseye"
        auth: *docker-auth
  py310:
    <<: *executor
    docker:
      - image: "python:3.10-bullseye"
        auth: *docker-auth
  py311:
    <<: *executor
    docker:
      - image: "python:3.11-bullseye"
        auth: *docker-auth
  pypy37:
    <<: *executor
    docker:
      - image: "pypy:3.7-bullseye"
        auth: *docker-auth
  pypy38:
    <<: *executor
    docker:
      - image: "pypy:3.8-bullseye"
        auth: *docker-auth
  pypy39:
    <<: *executor
    docker:
      - image: "pypy:3.9-bullseye"
        auth: *docker-auth

commands:
  using_poetry:
    parameters:
      steps:
        type: steps
        default: []
      cache_key:
        type: string
        default: ""
    description: "Wraps the steps given with a poetry cache"
    steps:
      - run: python -V
      - restore_cache:
          keys:
            - poetry-v6-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
            - poetry-v6-<<parameters.cache_key>>-
            - poetry-v6-
      - run: mkdir -p $POETRY_CACHE_DIR
      - run: mkdir -p $POETRY_VIRTUALENVS_PATH
      - run: mkdir -p $PIP_CACHE_DIR
      - run: mkdir -p $PRE_COMMIT_HOME
      - run: poetry -V
      - run: poetry config --list
      - steps: <<parameters.steps>>
      - save_cache:
          key: poetry-v6-<<parameters.cache_key>>-{{ checksum "pyproject.toml" }}
          paths:
            - ~/caches/poetry
            - poetry.lock
  using_pip_cache:
    description: "Execute with pip caching"
    parameters:
      steps:
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - pip-v3-{{ .Environment.CIRCLE_JOB }}-
      - run: mkdir -p $PIP_CACHE_DIR
      - steps: <<parameters.steps>>
      - save_cache:
          key: pip-v3-{{ .Environment.CIRCLE_JOB }}-
          paths:
            - ~/caches/pip
  using_pre_commit:
    description: "Install pre-commit with caching"
    parameters:
      steps:
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - pre-commit-v4-{{ checksum ".pre-commit-config.yaml" }}
            - pre-commit-v4-
      - run: mkdir -p $PRE_COMMIT_HOME
      - run: pip install pre-commit
      - steps: <<parameters.steps>>
      - save_cache:
          key: pre-commit-v4-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/caches/pre-commit
  using_hypothesis_cache:
    description: "Caching for hypothesis DB"
    parameters:
      steps:
        type: steps
        default: []
      cache_key:
        type: string
    steps:
      - restore_cache:
          keys:
            - "hypothesis-v6-<<parameters.cache_key>>"
      - steps: <<parameters.steps>>
      - save_cache:
          key: "hypothesis-v6-<<parameters.cache_key>>"
          paths:
            - ~/project/.hypothesis
  install_poetry:
    description: "Install poetry"
    steps:
      - using_pip_cache:
          steps:
            - run: pip install poetry
  test:
    description: "Run tests"
    parameters:
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
      python_version:
        type: string
    steps:
      - using_poetry:
          cache_key: "test-<<parameters.event_loop>>-<<parameters.python_version>>-v1"
          steps:
            - when:
                condition:
                  equal: ["uvloop", <<parameters.event_loop>>]
                steps:
                  - run: poetry install -E uvloop --with test
            - unless:
                condition:
                  equal: ["uvloop", <<parameters.event_loop>>]
                steps:
                  - run: poetry install --with test
            - run: |
                poetry run pytest --cov --cov-report= \
                  --cov-config=pyproject.toml \
                  --junitxml=test-results/$CIRCLE_JOB/results.xml \
                  --event-loop=<<parameters.event_loop>> \
                  --bind-addr=$BIND_ADDR \
                  --hypothesis-profile $HYPOTHESIS_PROFILE
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*
  lint:
    description: "Run pre-commit"
    steps:
      - run: pre-commit run --all-files --show-diff-on-failure
  typecheck:
    description: "Run mypy"
    steps:
      - using_poetry:
          cache_key: "typecheck-v1"
          steps:
            - run: poetry install --only typecheck
            - run: poetry run mypy aiosmtplib
  security:
    description: "Run security checks"
    steps:
      - using_poetry:
          cache_key: "security-v2"
          steps:
            - run: poetry install -E uvloop -E docs --with test,typecheck,security
            - run: poetry run bandit -n 10 -x tests -r aiosmtplib
            - run: poetry export --with test -E docs -E uvloop  -f requirements.txt --without-hashes | poetry run safety check --stdin
  docs:
    description: "Run docs build"
    steps:
      - using_poetry:
          cache_key: "docs-v1"
          steps:
            - run: poetry install -E docs --with test
            - run: poetry run sphinx-build -nWT -b doctest -d ./docs/build/doctrees ./docs ./docs/build/html
            - run: poetry run sphinx-build -nWT -b dummy -d ./docs/build/doctrees ./docs ./docs/build/html
  build:
    description: "Run poetry build"
    steps:
      - run: poetry check
      - run: poetry build -vv
      - persist_to_workspace:
          root: dist
          paths:
            - aiosmtplib-*.tar.gz
            - aiosmtplib-*.whl
      - store_artifacts:
          path: dist/
  deploy:
    description: "Deploy to PyPI"
    steps:
      - run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - run: poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      - run: poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD
  coverage:
    description: "Collect coverage"
    steps:
      - run: cp coverage-results/.coverage.* ./
      - using_poetry:
          cache_key: "coverage-v1"
          steps:
            - run: poetry install --with test
            - run: poetry run coverage combine
            - run: poetry run coverage xml
            - run: poetry run coverage html
            - store_artifacts:
                path: coverage.xml
            - store_artifacts:
                path: htmlcov
            - codecov/upload:
                file: coverage.xml
            - run: poetry run coverage report --fail-under=90

jobs:
  lint:
    executor: default
    steps:
      - checkout
      - using_pip_cache:
          steps:
            - using_pre_commit:
                steps:
                  - lint

  typecheck:
    executor: default
    steps:
      - checkout
      - typecheck

  security:
    executor: default
    steps:
      - checkout
      - security

  build:
    executor: default
    steps:
      - checkout
      - build

  docs:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - docs

  test:
    executor: <<parameters.python_version>>
    parameters:
      python_version:
        type: enum
        description: "executor name"
        enum:
          [
            "py37",
            "py38",
            "py39",
            "py310",
            "py311",
            "pypy37",
            "pypy38",
            "pypy39",
          ]
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.python_version>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      BIND_ADDR: "127.0.0.1"
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - install_poetry
      - using_hypothesis_cache:
          cache_key: <<parameters.python_version>>
          steps:
            - test:
                python_version: <<parameters.python_version>>
                event_loop: <<parameters.event_loop>>

  coverage:
    executor: py310
    environment:
      COVERAGE_FILE: .coverage
    steps:
      - checkout
      - attach_workspace:
          at: coverage-results
      - install_poetry
      - coverage

  deploy:
    executor: default
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - deploy

workflows:
  version: 2
  lint:
    jobs:
      - typecheck: &base-job
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - security: *base-job
  build_test_deploy:
    jobs:
      - build: *base-job
      - docs:
          <<: *base-job
          requires: &phase1
            - build
      - test:
          <<: *base-job
          python_version: "py37"
          event_loop: "asyncio"
          name: "test-py37-asyncio"
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-py38-asyncio"
          python_version: "py38"
          event_loop: "asyncio"
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-py39-asyncio"
          python_version: "py39"
          event_loop: "asyncio"
          requires: *phase1
      - test:
          <<: *base-job
          name: test-py310-asyncio
          python_version: "py310"
          event_loop: "asyncio"
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-py311-asyncio"
          python_version: "py311"
          event_loop: "asyncio"
          requires: *phase1
      - test:
          <<: *base-job
          name: "test-py37-uvloop"
          python_version: "py37"
          event_loop: "uvloop"
          requires: &phase2
            - build
            - docs
            - test-py37-asyncio
            - test-py38-asyncio
            - test-py39-asyncio
            - test-py310-asyncio
            - test-py311-asyncio
      - test:
          <<: *base-job
          name: "test-py38-uvloop"
          python_version: "py38"
          event_loop: "uvloop"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-py39-uvloop"
          python_version: "py39"
          event_loop: "uvloop"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-py310-uvloop"
          python_version: "py310"
          event_loop: "uvloop"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-py311-uvloop"
          python_version: "py311"
          event_loop: "uvloop"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-pypy37-asyncio"
          python_version: "pypy37"
          event_loop: "asyncio"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-pypy38-asyncio"
          python_version: "pypy38"
          event_loop: "asyncio"
          requires: *phase2
      - test:
          <<: *base-job
          name: "test-pypy39-asyncio"
          python_version: "pypy39"
          event_loop: "asyncio"
          requires: *phase2
      - coverage:
          <<: *base-job
          requires: &phase3
            - build
            - docs
            - test-py37-asyncio
            - test-py38-asyncio
            - test-py39-asyncio
            - test-py310-asyncio
            - test-py311-asyncio
            - test-py37-uvloop
            - test-py38-uvloop
            - test-py39-uvloop
            - test-py310-uvloop
            - test-py311-uvloop
            - test-pypy37-asyncio
            - test-pypy38-asyncio
            - test-pypy39-asyncio
      - deploy:
          requires: *phase3
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

# VS Code Extension Version: 1.1.1
