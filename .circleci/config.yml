version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3

executors:
  circleci_py310:
    docker:
      - image: "cimg/python:3.10"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  py37:
    docker:
      - image: "python:3.7-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  py38:
    docker:
      - image: "python:3.8-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  py39:
    docker:
      - image: "python:3.9-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  py310:
    docker:
      - image: "python:3.10-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  pypy37:
    docker:
      - image: "pypy:3.7-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  pypy38:
    docker:
      - image: "pypy:3.8-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small
  pypy39:
    docker:
      - image: "pypy:3.9-bullseye"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    resource_class: small

commands:
  python_version:
    description: "Output Python version"
    steps:
      - run:
          command: python -V
          name: "Checking python version"

  tox:
    description: "Run tox"
    steps:
      - restore_cache:
          name: "Restoring cache"
          keys:
            - tox-v7-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}
            - tox-v7-{{ .Environment.CIRCLE_JOB }}-
      - run:
          command: pip install --upgrade tox
          name: "Installing tox"
          environment:
            XDG_CACHE_HOME: "/tmp/cache"
      - run:
          command: tox --workdir /tmp/toxworkdir --installpkg dist/aiosmtplib-*.whl --skip-missing-interpreters false
          name: "Running tox"
          environment:
            XDG_CACHE_HOME: "/tmp/cache"
      - save_cache:
          name: "Updating cache"
          key: tox-v7-{{ .Environment.CIRCLE_JOB }}-{{ checksum "tox.ini" }}
          paths:
            - /tmp/toxworkdir
            - /tmp/cache/pip

jobs:
  lint:
    executor: circleci_py310
    environment:
      PRE_COMMIT_HOME: /tmp/cache/pre-commit
      TOXENV: lint
    steps:
      - python_version
      - checkout
      - restore_cache:
          name: "Restoring pre-commit cache"
          keys:
            - pre-commit-v5-{{ checksum ".pre-commit-config.yaml" }}
            - pre-commit-v5-
      - tox
      - save_cache:
          name: "Updating pre-commit cache"
          key: pre-commit-v5-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - /tmp/cache/pre-commit

  docs:
    executor: circleci_py310
    environment:
      TOXENV: docs
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: dist
      - tox

  build:
    executor: circleci_py310
    environment:
      POETRY_CACHE_DIR: /tmp/cache/poetry
    steps:
      - python_version
      - checkout
      - restore_cache:
          name: "Restoring poetry cache"
          keys:
            - poetry-v2-{{ .Environment.CIRCLE_JOB }}-{{ checksum "pyproject.toml" }}
            - poetry-v2-{{ .Environment.CIRCLE_JOB }}-
      - run:
          name: Building packages
          command: poetry build -vv
      - save_cache:
          name: "Updating poetry cache"
          key: poetry-v2-{{ .Environment.CIRCLE_JOB }}-{{ checksum "pyproject.toml" }}
          paths:
            - /tmp/cache/poetry
      - persist_to_workspace:
          root: dist
          paths:
            - aiosmtplib-*.tar.gz
            - aiosmtplib-*.whl
      - store_artifacts:
          path: dist/

  test:
    executor: <<parameters.python_version>>
    parameters:
      python_version:
        type: enum
        description: "executor name"
        enum: ["py37", "py38", "py39", "py310", "pypy37", "pypy38", "pypy39"]
      event_loop:
        type: enum
        description: "event loop type"
        enum: ["asyncio", "uvloop"]
    environment:
      COVERAGE_FILE: "coverage-results/.coverage.<<parameters.python_version>>-<<parameters.event_loop>>"
      HYPOTHESIS_PROFILE: "ci"
      BIND_ADDR: "127.0.0.1"
      TOXENV: "<<parameters.python_version>>-<<parameters.event_loop>>"
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: dist
      - restore_cache:
          name: "Restoring hypothesis database"
          keys:
            - "hypothesis-v4-<<parameters.python_version>>"
      - tox
      - save_cache:
          name: "Updating hypothesis database"
          key: "hypothesis-v4-<<parameters.python_version>>"
          paths:
            - ~/project/.hypothesis
      - store_artifacts:
          path: test-results
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: coverage-results
          paths:
            - .coverage.*

  coverage:
    executor: py310
    environment:
      TOXENV: coverage
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: coverage-results
      - run:
          name: "Copy coverage results from workspace"
          command: cp coverage-results/.coverage.* ./
      - tox
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
      - codecov/upload:
          file: coverage.xml

  deploy:
    executor: circleci_py310
    steps:
      - python_version
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Uploading to Test PyPI
          command: |
            poetry config repositories.testpypi https://test.pypi.org/simple
            poetry publish -vv --repository testpypi --username $TESTPYPI_USERNAME --password $TESTPYPI_PASSWORD
      - run:
          name: Uploading to PyPI
          command: poetry publish -vv --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  version: 2
  lint:
    jobs:
      - lint:
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
  build_test_deploy:
    jobs:
      - build:
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - docs:
          context:
            - docker-hub-credentials
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          name: test-<<matrix.python_version>>-<<matrix.event_loop>>
          matrix:
            parameters:
              python_version: ["py37", "py38", "py39", "py310", "pypy37", "pypy38", "pypy39"]
              event_loop: ["asyncio", "uvloop"]
            exclude:
              - python_version: "pypy37"
                event_loop: "uvloop"
              - python_version: "pypy38"
                event_loop: "uvloop"
              - python_version: "pypy39"
                event_loop: "uvloop"
          requires:
            - build
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - coverage:
          requires:
            - test
          context:
            - docker-hub-credentials
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - test
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
